# Default values for base.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent

# override Chart.Name
nameOverride: ""

# override Chart.Fullname
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  repository: nginx
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:
  # list of secrets to connect to the service account
  secrets: []
  # - mySecret
  # list of imagePullSecrets to connect to the service account
  imagePullSecrets: []
  # - myImagePullSecret

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# A list of secrets and key from the secret to inject into the pod as environment variables. secrets should pre-exist
# secrets:
#   POD_SECRET_ENV_VAR:
#     secretName: keyInSecret

# A list of keys from the chart's default configMap to inject into the pod as environment variables
# envs:
#   POD_ENV_VAR:
#     configMapKey: configMapValue

# create a configmap with all the files under the configs directory
# list all file names under .files
# mountPath is the location to place the files in the pod
configuration: {}
  # files: []
  # - config.conf
  # mountPath: /app/config

# Additional configMaps to connect to the pod. configMaps should pre-exist
extraConfigmapMounts: {}
  # - name: certs-configmap
  #   mountPath: /app/certs/ssl/

# should we create a service
service:
  enabled: true
  # type: LoadBalancer

# Ports to be used for the pod and service. for each block, a port spec will be injected to both the podspec in the deployment.yaml and the corresponding service object. 
# When defining nodePort, you can leave the value empty and a random port will be chosen for you

ports:
  # without nodePort
  http:
    protocol: TCP
    containerPort: 80
    servicePort: 80
  
  # with random nodePort
  # https:
  #   protocol: TCP
  #   containerPort: 443
  #   servicePort: 443
  #   nodePort:
  
  # with specific nodePort (beware of conflicts)
  # metrics:
  #   protocol: TCP
  #   containerPort: 9000
  #   servicePort: 9000
  #   nodePort: 30000

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

# should we run tests once the chart is deployed. setting to true will rended all yamls under tests/ sub-folder

testing: false

# Autoscaling specs

autoscaling:
  # should we enable hpa
  enabled: false

  # we automatically set the minReplicas to .Values.replicaCount. If you wish to override that value, please change below:
  # minReplicas: 2

  # set the maximum number of replicas
  maxReplicas: 5

  # cpu utilization threshold for scaling
  cpuUtilization: 80

  # we automatically set the target for scaling to the deployment in the chart (deployment.yaml). If you with to override that spec, please change below:
  targetApiVersion: 
  targetKind: 
  targetName: 